var vendors = require('../vendors'),
  config = require('../conf/config'),
  Server = require('../lib/server');

var CSF = function(passphrase, key) {
  this.passphrase = passphrase;
  this.key = key;
};

CSF.prototype.start = function() {
  var self = this;


  function unlock(server, event) {
    var ip = event.ip.trim().replace(/;/g, '');
    server.connectionPool.send('csf -dr "' + ip + '"; csf -tr "' + ip + '"', function (err, data) {
      setTimeout(function() {
        server.disconnect();
      }, 10000);
    });
  }

  var subscriber = vendors.redis.createClient();
  subscriber.subscribe('csf');

  subscriber.on('message', function (channel, event) {
    event = JSON.parse(event);
    var ev = {
      type: 'plugins',
      message: event.hostname + ' -> CSF operation failed.'
    };
    var ip = event.ip.trim().replace(/;/g, '');
    ip = event.ip.trim().replace(/|/g, '');

    if(event.hostname) {
      console.log(event);
      var server = new Server(event.hostname, config.crawler_port, config.crawler_user, self.passphrase, self.key, config.timer);

      server.on('ready', function () {
        var selfs = this;
        if(event.type == 'unlock') {
          this.connectionPool.send('csf -g "' + ip + '"', function (err, data) {
            if (data && data.toString('utf-8').indexOf('No matches found for ' + ip + ' in iptables') === -1) {
              var aux = data.toString('utf-8');
              aux = aux.trim().split('\n');
              var motive = aux[aux.length - 1];
              unlock(selfs, event);
              ev.message = event.hostname + ' -> ' + motive;
            } else {
              ev.message = event.hostname + ' -> IP not blocked.';
              server.disconnect();
            }
          });
        } else if(event.type == 'lock') {
          var reason = event.reason.trim().replace(/;/g, '');
          this.connectionPool.send('csf -d ' + ip + ' ' + reason, function (err, data) {
            ev.message = event.hostname + ' -> IP blocked.';
            server.disconnect();
          });
        }
      });

      server.on('closed', function(connected) {
        vendors.redis.publisher.publish('events', JSON.stringify(ev));
      });

      server.connect();
    } else {
      vendors.redis.publisher.publish('events', JSON.stringify(ev));
    }
  });
};

process.on('message', function(m) {
  console.log('Starting CSF plugin...');
  new CSF(m.boot, m.key).start();
});
